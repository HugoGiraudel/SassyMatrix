/*! sassymatrix - v0.0.1 - 2014-01-23 */
// Returns the visual representation of `$matrix` as a string
// --------------------------------------------------------------------------------
// @param $matrix: matrix to display
// --------------------------------------------------------------------------------
// @return string

@function display($matrix) {
  $str: "";
  @each $line in $matrix {
    $tmp: "";
    @each $item in $line {
      $tmp: $tmp + " " + $item;
    }
    $str: $str + $tmp + "\A ";
  }
  @return $str;
}

// Mixin displaying the matrix
// using body pseudo-elements
//
// @param $matrix: matrix to display
// @param $pseudo: pseudo element to use

@mixin display($matrix, $pseudo: before) {
    body:#{$pseudo} {
        content: display($matrix)                 !important;

        display: block                            !important;
        margin: 1em                               !important;
        padding: .5em                             !important;

        background: #EFEFEF                       !important;
        border: 1px solid #DDD                    !important;
        border-radius: .2em                       !important;

        color: #333                               !important;
        font: 1.5em/1.5 "Courier New", monospace  !important;
        text-shadow: 0 1px white                  !important;
        white-space: pre-wrap                     !important;
    }
}

// Returns number of rows in `$matrix`
// --------------------------------------------------------------------------------
// @param $matrix: matrix
// --------------------------------------------------------------------------------
// @return number

@function rows($matrix) {
  @return length($matrix);
}
// Returns number of columns in `$matrix`
// --------------------------------------------------------------------------------
// @param $matrix: matrix
// --------------------------------------------------------------------------------
// @return number

@function columns($matrix) {
  @return length(nth($matrix, 1));
}

// Checks whether `$coords` are valid coordinates
// --------------------------------------------------------------------------------
// @require `rows`
// @require `columns`
// --------------------------------------------------------------------------------
// @param $matrix: matrix
// @param $coords: coordinates
// --------------------------------------------------------------------------------
// @return boolean

@function _valid-coords($coords, $matrix: null) {
  @if length($coords) == 1 {
    $coords: ($coords, $coords);
  }

  $x: nth($coords, 1);
  $y: nth($coords, 2);

  @if length($coords) != 2 {
    @warn "Wrong number of coordinates.";
    @return false;
  }

  @if type-of($x) != number or type-of($y) != number {
    @warn "Invalid coordinates.";
    @return false;
  }

  @if $matrix {
    @if abs($x) > rows($matrix) or abs($y) > columns($matrix) {
      @warn "Out of bound coordinates.";
      @return false;
    }
  }

  @return true;
}

// Initializing a matrix of `$x` by `$y` with 0s
// --------------------------------------------------------------------------------
// @require `_valid-coords`
// --------------------------------------------------------------------------------
// @param $x: number of rows
// @param $y: number of columns
// --------------------------------------------------------------------------------
// @return matrix

@function matrix($x, $y: $x) {
  @if _valid-coords(($x $y)) {
    $matrix: ();
    @for $i from 1 through $x {
      $tmp: ();
      @for $y from 1 through $y {
        $tmp: append($tmp, 0)
      }
      $matrix: append($matrix, $tmp);
    }
    @return $matrix;
  }
  @return false;
}

// Assign `$value` at `$matrix[$coords[1], $coords[2]]`
// --------------------------------------------------------------------------------
// @require `_valid-coords`
// --------------------------------------------------------------------------------
// @param $matrix: matrix to update
// @param $coords: (x y) coordinates
// @param $value: value to assign at $matrix[$x, $y]
// --------------------------------------------------------------------------------
// @return matrix

@function set-entry($matrix, $coords, $value) {
  @if length($coords) == 1 {
    $coords: ($coords $coords);
  }
  @if _valid-coords($coords, $matrix) {
    @return set-nth($matrix, nth($coords, 1), set-nth(nth($matrix, nth($coords, 1)), nth($coords, 2), $value));
  }
  @return false;
}

// Returns entry at `$matrix[$coords[1], $coords[2]]`
// --------------------------------------------------------------------------------
// @require `_valid-coords`
// --------------------------------------------------------------------------------
// @param $matrix: matrix
// @param $coords: (x y) coordinates
// --------------------------------------------------------------------------------
// @return literal

@function get-entry($matrix, $coords) {
  @if length($coords) == 1 {
    $coords: ($coords $coords);
  }

  @if _valid-coords($coords, $matrix) {
    @return nth(nth($matrix, nth($coords, 1)), nth($coords, 2));
  }

  @return false;
}

// Return row at `$index` from `$matrix`
// --------------------------------------------------------------------------------
// @require `rows`
// --------------------------------------------------------------------------------
// @param $matrix: matrix
// @param $index: index
// --------------------------------------------------------------------------------
// @return list

@function get-row($matrix, $index) {
  @if type-of($index) != number {
    @warn "Invalid row index.";
    @return false;
  }

  @if abs($index) > rows($matrix) {
    @warn "Out of bound row index.";
    @return false;
  }

  @return nth($matrix, $index);
}
// Swaps rows `$r1` and `$r2` from `$matrix`
// --------------------------------------------------------------------------------
// @require `rows`
// --------------------------------------------------------------------------------
// @param $matrix: matrix
// @param $r1: index of row 1
// @param $r2: index of row 2
// --------------------------------------------------------------------------------
// @return $matrix

@function swap-rows($matrix, $r1, $r2) {
  @if type-of($r1) != number or type-of($r2) != number {
    @warn "Invalid row index.";
    @return false;
  }

  @if abs($r1) > rows($matrix) or abs($r2) > rows($matrix) {
    @warn "Out of bounds row index.";
    @return false;
  }

  $tmp: nth($matrix, $r1);
  @return set-nth(set-nth($matrix, $r1, nth($matrix, $r2)), $r2, $tmp);
}

// Set `$row` at `$index` in `$matrix`
// --------------------------------------------------------------------------------
// @require `columns`
// @require `rows`
// --------------------------------------------------------------------------------
// @param $matrix: matrix
// @param $row: row
// @param $index: index
// --------------------------------------------------------------------------------
// @return matrix

@function set-row($matrix, $index, $row: ()) {
  $desired-length: columns($matrix);

  @if type-of($index) != number {
    @warn "Invalid row index.";
    @return false;
  }

  @if abs($index) > rows($matrix) {
    @warn "Out of bound row index.";
    @return false;
  }

  @if $row == () {
    @for $i from 1 through $desired-length {
      $row: append($row, 0);
    }
  }

  @if length($row) != $desired-length {
    @warn "Wrong length for new row; should be #{$desired-length}.";
    @return false;
  }

  @return set-nth($matrix, $index, $row);
}
// Returns whether `$matrix` has as many rows as columns
// --------------------------------------------------------------------------------
// @require `columns`
// @require `rows`
// --------------------------------------------------------------------------------
// @param $matrix: matrix
// --------------------------------------------------------------------------------
// @return boolean

@function is-square($matrix) {
  @return columns($matrix) == rows($matrix);
}
// Add a new `$row` to `$matrix`
// --------------------------------------------------------------------------------
// @require `swap-rows`
// @require `columns`
// --------------------------------------------------------------------------------
// @param $matrix: matrix
// @param $row: row to add
// @param $index: index to add row at
// --------------------------------------------------------------------------------
// @return matrix

@function add-row($matrix, $row: (), $index: null) {
  $desired-length: columns($matrix);

  @if $row == () {
    @for $i from 1 through $desired-length {
      $row: append($row, 0);
    }
  }
  
  @if length($row) != $desired-length {
    @warn "Wrong length for new row; should be #{$desired-length}.";
    @return false;
  }
  
  $matrix: append($matrix, $row);

  @if $index != null {
    $matrix: swap-rows($matrix, -1, $index);
  }

  @return $matrix;
}
// Add a new `$column` to `$matrix` at `$index`
// --------------------------------------------------------------------------------
// @require `rows`
// @require `swap-columns`
// --------------------------------------------------------------------------------
// @param $matrix: matrix
// @param $column: column to add
// @param $index: index to add column at
// --------------------------------------------------------------------------------
// @return matrix

@function add-column($matrix, $column: (), $index: null) {
  $desired-length: rows($matrix);

  @if $column == () {
    @for $i from 1 through $desired-length {
      $column: append($column, 0);
    }
  }
  
  @if length($column) != $desired-length {
    @warn "Wrong length for new column; should be #{$desired-length}.";
    @return false;
  }
  
  @for $i from 1 through $desired-length {
    $matrix: set-nth($matrix, $i, append(nth($matrix, $i), nth($column, $i)));
  }

  @if $index != null {
    $matrix: swap-columns($matrix, -1, $index);
  }
  
  @return $matrix;
}
// Set `$column` at `$index` in `$matrix`
// --------------------------------------------------------------------------------
// @require `set-entry`
// @require `rows`
// @require `columns`
// --------------------------------------------------------------------------------
// @param $matrix: matrix
// @param $column: column
// @param $index: index
// --------------------------------------------------------------------------------
// @return matrix

@function set-column($matrix, $index, $column: ()) {
  $desired-length: rows($matrix);

  @if type-of($index) != number {
    @warn "Invalid column index.";
    @return false;
  }

  @if abs($index) > columns($matrix) {
    @warn "Out of bound column index.";
    @return false;
  }

  @if $column == () {
    @for $i from 1 through $desired-length {
      $column: append($column, 0);
    }
  }

  @if length($column) != $desired-length {
    @warn "Wrong length for new column; should be #{$desired-length}.";
    @return false;
  }

  @for $i from 1 through $desired-length {
    $matrix: set-entry($matrix, $i $index, nth($column, $i));
  }

  @return $matrix;
}

// Return column at `$index` from `$matrix`
// --------------------------------------------------------------------------------
// @require `get-entry`
// @require `rows`
// @require `columns`
// --------------------------------------------------------------------------------
// @param $matrix: matrix
// @param $index: index
// --------------------------------------------------------------------------------
// @return list

@function get-column($matrix, $index) {
  @if type-of($index) != number {
    @warn "Invalid column index.";
    @return false;
  }

  @if abs($index) > columns($matrix) {
    @warn "Out of bound column index.";
    @return false;
  }

  $column: ();
  @for $i from 1 through rows($matrix) {
    $column: append($column, get-entry($matrix, ($i $index)))
  }

  @return $column;
}

// Checks whether all entries from `$matrix` are numeric
// --------------------------------------------------------------------------------
// @require `rows`
// @require `columns`
// @require `get-entry`
// --------------------------------------------------------------------------------
// @return boolean

@function is-numeric($matrix) {
  @for $i from 1 through rows($matrix) {
    @for $j from 1 through columns($matrix) {
      @if type-of(get-entry($matrix, ($i $j))) != number {
        @return false;
      }
    }
  }
  @return true;
}

// Checks whether all entries from the main diagonal of `$matrix`
// are set while all other entries are equal to the 0
// --------------------------------------------------------------------------------
// @require `get-entry`
// @require `columns`
// @require `rows`
// --------------------------------------------------------------------------------
// @param $matrix: matrix
// --------------------------------------------------------------------------------
// @return boolean

@function is-diagonal($matrix) {
  @for $i from 1 through rows($matrix) {
    @for $j from 1 through columns($matrix) {
      $entry: get-entry($matrix, ($i $j));
      @if ($i != $j and $entry != 0) or ($i == $j and $entry == 0) {
        @return false;
      }
    }
  }
  @return true;
}

// Checks whether `$matrix` is `$side` triangular with `$flag` options
// --------------------------------------------------------------------------------
// @require `rows`
// @require `columns`
// @require `get-entry`
// --------------------------------------------------------------------------------
// @param $matrix: matrix
// @param $side: side (top | bottom)
// @param $flag: advanced options (null | strict | unit | atom)
// --------------------------------------------------------------------------------
// @return boolean

@function _is-triangular($matrix, $side: top, $flag: null) {
  @for $i from 1 through rows($matrix) {
    @for $j from 1 through columns($matrix) {
      $entry: get-entry($matrix, ($i $j));
      @if $i > $j {
        @if $side == top and $entry != 0 { @return false; }
      }
      @else if $i < $j {
        @if $side == bottom and $entry != 0 { @return false; }
      }
      @else {
        @if $flag == strict and $entry != 0 { @return false; }
        @if $flag == unit and $entry != 1 { @return false; }
      }
    }
  }
  @return true;
}

// Initializing a matrix of `$x` by `$y` with its diagonal filled with 1s
// --------------------------------------------------------------------------------
// @require `_valid-coords`
// @require `matrix`
// @require `set-entry`
// --------------------------------------------------------------------------------
// @param $x: number of rows
// @param $y: number of columns
// --------------------------------------------------------------------------------
// @return matrix

@function unit-matrix($x, $y: $x) {
  @if _valid-coords(($x $y)) {
    $matrix: matrix($x, $y);
    @for $i from 1 through $x {
      @for $j from 1 through $y {
        @if $i == $j {
          $matrix: set-entry($matrix, ($i $j), 1);
        }
      }
    }
    @return $matrix;
  }
  @return false;
}

// Swaps entries `$e1` and `$e2` from `$matrix`
// --------------------------------------------------------------------------------
// @require `_valid-coords`
// @require `get-entry`
// @require `set-entry`
// --------------------------------------------------------------------------------
// @param $matrix: matrix
// @param $e1: (x y) coordinates of first entry
// @param $e2: (x y) coordinates of second entry
// --------------------------------------------------------------------------------
// @return $matrix

@function swap-entries($matrix, $e1, $e2) {
  @if _valid-coords($e1, $matrix) and _valid-coords($e2, $matrix) {
    $tmp: get-entry($matrix, $e1);
    $matrix: set-entry(set-entry($matrix, $e1, get-entry($matrix, $e2)), $e2, $tmp);
    @return $matrix;
  }
  @return false;
}

// Swaps columns `$c1` and `$c2` from `$matrix`
// --------------------------------------------------------------------------------
// @require `rows`
// @require `columns`
// @require `get-entry`
// @require `set-entry`
// --------------------------------------------------------------------------------
// @param $matrix: matrix
// @param $c1: index of column 1
// @param $c2: index of column 2
// --------------------------------------------------------------------------------
// @return $matrix

@function swap-columns($matrix, $c1, $c2) {
  @if type-of($c1) != number or type-of($c2) != number {
    @warn "Invalid column index.";
    @return false;
  }
  
  @if abs($c1) > columns($matrix) or abs($c2) > columns($matrix) {
    @warn "Out of bounds column index.";
    @return false;
  }

  @for $i from 1 through rows($matrix) {
    $tmp: get-entry($matrix, ($i $c1));
    $matrix: set-entry($matrix, ($i $c1), get-entry($matrix, ($i $c2)));
    $matrix: set-entry($matrix, ($i $c2), $tmp);
  }

  @return $matrix;
}

// Checks whether `$matrix` is upper triangular with `$flag` option
// --------------------------------------------------------------------------------
// @require `_is-triangular`
// --------------------------------------------------------------------------------
// @param $matrix: matrix
// @param $flag: advanced option (null | strict | unit | atom)
// --------------------------------------------------------------------------------
// @return boolean

@function is-upper-triangular($matrix, $flag: null) {
  @return _is-triangular($matrix, top, $flag);
}

// Checks whether `$matrix` is lower triangular with `$flag` option
// --------------------------------------------------------------------------------
// @require `_is-triangular`
// --------------------------------------------------------------------------------
// @param $matrix: matrix
// @param $flag: advanced option (null | strict | unit | atom)
// --------------------------------------------------------------------------------
// @return boolean

@function is-lower-triangular($matrix, $flag: null) {
  @return _is-triangular($matrix, bottom, $flag);
}

// Add `$matrices`
// --------------------------------------------------------------------------------
// @require `rows`
// @require `columns`
// @require `get-entry`
// @require `set-entry`
// --------------------------------------------------------------------------------
// @param $matrices: matrices
// --------------------------------------------------------------------------------
// @return matrix

@function add-matrices($matrices...) {
  $matrix: nth($matrices, 1);
  @each $m in $matrices {
    @if columns($matrix) != columns($m)
    or rows($matrix) != rows($m) {
      @warn "All matrices do not have same dimensions.";
      @return false;
    }
  }

  @for $i from 1 through rows($matrix) {
    @for $j from 1 through columns($matrix) {
      $value: null;
      @each $m in $matrices {
        $entry: get-entry($m, ($i $j));
        $value: if($value == null, $entry, $value + $entry);
      }
      $matrix: set-entry($matrix, ($i $j), $value);
    }
  }
  @return $matrix;
}

// Translate `$matrix` on its diagonal axe
// --------------------------------------------------------------------------------
// @require `matrix`
// @require `columns`
// @require `rows`
// @require `get-entry`
// @require `set-entry`
// --------------------------------------------------------------------------------
// @param $matrix: matrix
// --------------------------------------------------------------------------------
// @return matrix

@function transpose($matrix) {
  $new-matrix: matrix(columns($matrix), rows($matrix));
  @for $i from 1 through rows($matrix) {
    @for $j from 1 through columns($matrix) {
      $entry: get-entry($matrix, ($i $j));
      $new-matrix: set-entry($new-matrix, ($j $i), $entry);
    }
  }
  @return $new-matrix;
}
